// Обновить количество товара в заказе

router.patch('/:orderId/product/:productId', async (req, res) => {

  const { orderId, productId } = req.params;

  const { quantity } = req.body;

  try {

    const order = await Order.findById(orderId);

    if (!order) {

      return res.status(404).json({ message: 'Order not found' });

    }

    const productItem = order.products.find(item => String(item.product) === productId);

    if (!productItem) {

      return res.status(404).json({ message: 'Product not found in the order' });

    }

    productItem.quantity = quantity;

    await order.save();

    res.status(200).json(order);

  } catch (err) {

    res.status(500).json({ message: err.message });

  }

});

//////////////////////////////////////////////////////////////////////////////////////////

// routes/orders.js

// Добавить товар в заказ

router.post('/:orderId/product/:productId', async (req, res) => {

  const { orderId, productId } = req.params;

  const { quantity } = req.body;

  try {

    const order = await Order.findById(orderId);

    if (!order) {

      return res.status(404).json({ message: 'Order not found' });

    }

    const product = await Product.findById(productId);

    if (!product) {

      return res.status(404).json({ message: 'Product not found' });

    }

    order.products.push({ product: productId, quantity: quantity || 1 });

    await order.save();

    res.status(201).json(order);

  } catch (err) {

    res.status(500).json({ message: err.message });

  }

});

////////////////////////////////////////////////////////////////////////

// routes/orders.js

// Удалить товар из заказа

router.delete('/:orderId/product/:productId', async (req, res) => {

  const { orderId, productId } = req.params;

  try {

    const order = await Order.findById(orderId);

    if (!order) {

      return res.status(404).json({ message: 'Order not found' });

    }

    const updatedProducts = order.products.filter(item => String(item.product) !== productId);

    order.products = updatedProducts;

    await order.save();

    res.status(200).json(order);

  } catch (err) {

    res.status(500).json({ message: err.message });

  }

});

////////////////////////////////////////////////////////////////

// routes/orders.js

// Обновить состояние заказа

router.patch('/:orderId/status', async (req, res) => {

  const { orderId } = req.params;

  const { status } = req.body;

  try {

    const order = await Order.findById(orderId);

    if (!order) {

      return res.status(404).json({ message: 'Order not found' });

    }

    order.status = status;

    await order.save();

    res.status(200).json(order);

  } catch (err) {

    res.status(500).json({ message: err.message });

  }

});

//////////////////////////////////////////

router.get('/orders/:orderId', async (req, res) => {
  try {
    const orderId = req.params.orderId;
    const order = await Order.findById(orderId).populate('products.product'); // Используем метод populate для получения информации о продуктах

    res.json(order);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

const axios = require('axios');

const API_URL = 'your_api_url';

const $api = axios.create({
  withCredentials: true,
  baseURL: API_URL
});

$api.interceptors.request.use((config) => {
  const token = localStorage.getItem('token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

$api.interceptors.response.use((response) => {
  return response;
}, async (error) => {
  const originalRequest = error.config;
  if ((error.response.status === 401 || error.message === 'jwt expired') && !originalRequest._retry) {
    originalRequest._retry = true;
    try {
      const response = await $api.get(`${API_URL}/refresh`, { withCredentials: true });
      localStorage.setItem('token', response.data.accessToken);
      return $api(originalRequest);
    } catch (e) {
      console.log('Unauthorized');
    }
  }
  throw error;
});
